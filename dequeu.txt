//maxSubarrays of size k 


 vector<int> maxSlidingWindow(vector<int>& arr, int k) {
        vector<int>vec;
        deque<int>dq;
        
        for(int i = 0; i <k ; i++)
        {
            while(!dq.empty() && arr[i]>=arr[dq.back()])dq.pop_back();
            dq.push_back(i);
        }
        
        for(int i = k ; i<arr.size() ; i++)
        {
           vec.push_back(arr[dq.front()]);
            while(!dq.empty() && dq.front()<=i-k)dq.pop_front();
            while(!dq.empty() && arr[i] >= arr[dq.back()])dq.pop_back();
            dq.push_back(i);
        }
        vec.push_back(arr[dq.front()]);
        return vec;
    }


#include <iostream>
#include <vector>
#include <deque>
using namespace std;


//First circular tour
int firstPetrolPump(int petrol[], int dis[],int n)
{
  int start  = 0;
  int curr_petrol = 0;
  int prev_petrol = 0;

  for(int i = 0; i<n ; i++)
  {
    curr_petrol += (petrol[i] - dis[i]);
    if(curr_petrol<0)
    {
      start = i+1;
      prev_petrol+=curr_petrol;
      curr_petrol=0;
    }
  }
  return (curr_petrol+prev_petrol>=0)?start+1:-1;
}  