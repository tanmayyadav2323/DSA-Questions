class Solution {
    vector<vector<int>>vec;
public:
    void combinationSum(vector<int>& candidates, int target, int sum,int index,vector<int>v) {
        if(sum == target)vec.push_back(v);
        else if(sum<target)
        {
            for(int i = index; i<candidates.size();i++)
            {
                if(i>index && candidates[i] ==  candidates[i-1]);
                else if(sum+candidates[i]<=target)
                {
                    v.push_back(candidates[i]);
                    combinationSum(candidates,target,sum+candidates[i],i+1,v);
                    v.pop_back();
                }
                else return;
            }
        }
    }
    
        vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
            sort(candidates.begin(),candidates.end());
            combinationSum(candidates,target,0,0,{});
            return vec;
        }
};



//JUMP GAME 2

class Solution {
public:
    int jump(vector<int>& nums) {
        if(nums.size()==1)return 0;
        int jumps,i,check,x,dis;
        jumps = i = check = x = 0;
        dis = nums[0];
        while(i<nums.size())
        {
              if(i+dis>=nums.size()-1)
              {
                  jumps++;
                  break;
              }
              for(int j = i+1;j<=i+dis;j++)
              {
                  if(check<=nums[j]+j)
                  {
                      check=nums[j]+j;
                      x=j;
                  }
              }
              i=x;
              dis = check-x;
              check=0;
              jumps++;
        }
        
        return jumps;
    }
};



//Permutation

class Solution {
    vector<vector<int>>vec;
    map<int,int>m;
public:
    void permute1(vector<int>& nums,vector<int>v) {
        if(v.size()==nums.size())vec.push_back(v);
        else 
        {
            for(int i = 0; i<nums.size() ; i++)
            {
                    if(m[nums[i]]>0);
                    else
                    {
                        v.push_back(nums[i]);
                        m[nums[i]]++;
                        permute1(nums,v);
                        m[nums[i]]--;
                        v.pop_back();
                    }
            }
        }
    }
    vector<vector<int>> permute(vector<int>& nums)
    {
        permute1(nums,{});
        return vec;
    }
};


class Solution {
public:
    bool carPooling(vector<vector<int>>& trips, int capacity) {
        int *nums,m,count;
        nums = new int[1001]();
        m=count=0;
        for(auto val : trips)
        {
            nums[val[1]]+=val[0];
            nums[val[2]]-=val[0];
            m = max(m,val[2]);
        }
        
        for(int i = 0;i<=m;i++)
        {
            count += nums[i];
            if(count>capacity)return false;
        }
        return true;
    }
};