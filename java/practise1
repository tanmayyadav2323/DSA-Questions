public int pathSum(TreeNode root,int sum){
    HashMap<Integer,Integer> preSum = new HashMap();
    preSum.put(0,1);
    return 0;
}

public int helper(TreeNode root,int curSum,int target,HashMap<Integer,Integer> preSum){
    if(root == null)return 0;

    curSum += root->val;
    int res = preSum.getOrDefault(curSum-target,0);
    preSum.put(curSum,res+1);

    res += helper(root.left,curSum,target,preSum) + helper(root.right, currSum, target, preSum);
    preSum.put(currSum, preSum.get(currSum) - 1);
    return res; 
}


static int checkMirrorTree(int n ,int e,int[] A,int[] B)
{
    Map<Integer,Stack<Integer>>map = new HashMap<>();

    for(int i = 0 ;i<2*e ; i+=2)
    {
        if(!map.containsKey(A[i])){
            Stack<Integer> stack = new Stack<>();
            stack.push(A[i+1]);
            map.put(A[i],stack);
        }
        else
        {
            map.get(A[i]).push(A[i+1]);
        }
    }

    for(int i = 0; i<e*2 ; i+=2)
    {
        if(map.get(B[i]).peek() != B[i+1])return 0;
        else map.get(B[i]).pop();
    }

    return 1;
}


public class Solution{
    public boolean validTree(int n,int[][] edges){
        int[] nums =  new int[n];
        Array.fill(nums,-1);

        for(int i = 0; i<edges.length;i++)
        {
            int x = find(nums,edges[i][0]);
            int y = find(nums,edges[i][1]);

            if(x == y)return false;

            nums[x]=y;
        }

        return true;
    }

    int find(int[] nums,int i){
        if(nums[i] == -1)return i;
        return find(nums,nums[i]);
    }
}

class Solution {
    public  TreeNode deleteNode(TreeNode root,int key){
        if(root == null)return null;

        if(key < root.val)
        {
            root.left = deleteNode(root.left,key);
        }
        else if(key>root.val)
        {
            root.right = deleteNode(root.right,key);
        }
        else
        {
            if(root.left == null){
                return root.right;
            }
            else if(root.right == null){
                return root.left;
            }
            else
            {
                TreeNode min = root.right;
                while(min.left != null){
                    min = min.left;
                }
                root.val = min.val;
                root.right = deleteNode(root.right,min.val);
           
            }
        }
        return root;
    }
}

class Solution{
    private TreeNode ans;

    public Solution() {
        // Variable to store LCA node.
        this.ans = null;
    }
    public int findAncestor(TreeNode root, TreeNode p, TreeNode q, TreeNode ans)
    {
        if(root == null)return 0;
        int sum = 0;
        if(p == root)sum+=1;
        if(q == root)sum+=1;
        sum += findAncestor(root.left,p,q,ans);
        sum += findAncestor(root.right,p,q,ans);
        if(sum == 2)
        {
            ans = root;
            return 1;
        }
        return sum;
    }

    TreeNode lowestCommonAncestor(TreeNode root ,TreeNode p , TreeNode q){
        findAncestor(root,p,q,ans);
        return ans;
    }
}